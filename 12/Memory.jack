// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let memory[freeList] = 16383 - freeList;
        let memory[freeList+1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int segment, originalSize;
        
        let segment = freeList;
        while (~(memory[segment] > size)) {
            let segment = memory[segment+1];
        }
        let originalSize = memory[segment];
        
        if (originalSize < (size + 3)) {
            let freeList = memory[segment + 1];
        } else {
            let memory[segment] = size + 1;
            let freeList = freeList + (size + 1);
            let memory[freeList] = originalSize - (size + 1);
        }

        return segment + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int originalFreeList;
        let originalFreeList = freeList;
        let freeList = o - 1;
        let memory[o] = originalFreeList;
        return;
    }
}
