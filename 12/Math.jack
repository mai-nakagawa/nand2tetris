// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j, bit;
        let sum = 0;
        let shiftedX = x;
        let j = 1;
        let bit = 0;
        while (bit < 16) {
            if (~((y & j) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + j;
            let bit = bit + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int i, q, result;
        var bool neg;
        let result = 0;
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let neg = true;
        } else {
            let neg = false;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        while (~(x < y)) {
            let i = 1;
            let q = y;
            while (x - q > q) {
                let q = q + q;
                let i = i + i;
            }
            let x = x - q;
            let result = result + i;
        }
        if (neg = 0) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, j, n, y, val;
        let x = x - 1;  // to make sure stack can store `x` even if it's `32767(10)`
        let n = 0;
        let j = 1;
        while (~(x < (j - 1))) {
            let j = j + j;
            let n = n + 1;
        }
        let j = Math.divide(n, 2);
        let y = 0;
        while (~(j < 0)) {
            let i = j;
            let n = 1;
            while (i > 0) {
                let n = n + n;
                let i = i - 1;
            }
            let val = ((y + n) * (y + n)) - 1;
            if ((~(val > x)) & (val > 0)) {
                let y = y + n;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
}
